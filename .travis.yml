sudo: false
language: cpp

os:
    - linux

compiler:
    - clang
    - g++

env:
    - BUILD_TYPE=Debug CXX_FLAGS=-std=c++03
    - BUILD_TYPE=Debug CXX_FLAGS=-std=c++11
    - BUILD_TYPE=Release CXX_FLAGS=-std=c++03
    - BUILD_TYPE=Release CXX_FLAGS=-std=c++11

addons:
    apt:
        sources:
            - boost-latest
            - ubuntu-toolchain-r-test
        packages:
            - libboost1.55-all-dev
            - g++-4.8
            - cmake
            - libsdl1.2-dev
            - libsdl-mixer1.2-dev
            - libcurl4-openssl-dev
            - libbz2-dev
            - libminiupnpc-dev
            - liblua5.2-dev
            
matrix:
    include:
        - os: osx
          compiler: clang
          install:
              - brew update
              - brew install sdl
              - brew install sdl_mixer
              - brew install gettext
              - brew install miniupnpc
              - brew link --force gettext
          #                                                             Travis libs are x64 only
          env: BUILD_TYPE=Debug CXX_FLAGS=-std=c++03 ADDITIONAL_CMAKE_FLAGS="--no-arch=i386" GCOV="gcov"
    exclude:
        - compiler: clang
          env: BUILD_TYPE=Debug CXX_FLAGS=-std=c++03
        - compiler: clang
          env: BUILD_TYPE=Release CXX_FLAGS=-std=c++03            

install:
    # Enable coverage analysis only in debug and also skip clang
    - if [ "$CXX" = "g++" ] && [ "$BUILD_TYPE" = "Debug" ]; then export ADDITIONAL_CMAKE_FLAGS="${ADDITIONAL_CMAKE_FLAGS} -DRTTR_ENABLE_COVERAGE=ON"; fi
    # C++11 requires gcc-4.8 or newer
    - if [ "$CXX" = "g++" ] && [ "$CXX_FLAGS" = "-std=c++11" ]; then export CXX="g++-4.8"; fi
    - |
        if [ "$CXX" = "g++" ]; then
            # Adapt gcc and gcov version by simply replacing the prefix "g++"
            export CC=${CXX/g++/gcc}
            export GCOV=${CXX/g++/gcov};
        else
            export GCOV="gcov"
        fi

script:
    # Information
    - echo "OS= ${TRAVIS_OS_NAME}"
    - $CXX --version
    - $GCOV --version
    # Fail if any command failed
    - set -e
    - cd build
    - ./cmake.sh --RTTR_PREFIX=. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" --generator="Unix Makefiles" ${ADDITIONAL_CMAKE_FLAGS}
    - make
    # Execute tests
    - export CTEST_OUTPUT_ON_FAILURE=1
    - make test
    - set +e

after_success:
    - cd "${TRAVIS_BUILD_DIR}"
    - bash -c "find build -type f -name '*.gcno' -exec ${GCOV} -pb {} +" || true
    - |
        # Copied from codecovs bash.sh but excludes the lst files
        files=$(find build -type f \( -name '*coverage.*' \
                     -or -name 'nosetests.xml' \
                     -or -name 'jacoco*.xml' \
                     -or -name 'clover.xml' \
                     -or -name 'report.xml' \
                     -or -name 'cobertura.xml' \
                     -or -name 'luacov.report.out' \
                     -or -name 'lcov.info' \
                     -or -name '*.lcov' \
                     -or -name 'gcov.info' \
                     -or -name '*.gcov' \) \
                    -not -name '*.sh' \
                    -not -name '*.data' \
                    -not -name '*.py' \
                    -not -name '*.class' \
                    -not -name '*.xcconfig' \
                    -not -name 'Coverage.profdata' \
                    -not -name 'phpunit-code-coverage.xml' \
                    -not -name 'coverage.serialized' \
                    -not -name '*.pyc' \
                    -not -name '*.cfg' \
                    -not -name '*.egg' \
                    -not -name '*.whl' \
                    -not -name '*.html' \
                    -not -name '*.js' \
                    -not -name '*.cpp' \
                    -not -name 'coverage.jade' \
                    -not -name 'coverage.db' \
                    -not -name 'include.lst' \
                    -not -name 'inputFiles.lst' \
                    -not -name 'createdFiles.lst' \
                    -not -name 'coverage.html' \
                    -not -name 'scoverage.measurements.*' \
                    -not -name 'test_*_coverage.txt' \
                    -not -path '*/vendor/*' \
                    -not -path '*/htmlcov/*' \
                    -not -path '*/home/cainus/*' \
                    -not -path '*/virtualenv/*' \
                    -not -path '*/js/generated/coverage/*' \
                    -not -path '*/.virtualenv/*' \
                    -not -path '*/virtualenvs/*' \
                    -not -path '*/.virtualenvs/*' \
                    -not -path '*/.env/*' \
                    -not -path '*/.envs/*' \
                    -not -path '*/env/*' \
                    -not -path '*/envs/*' \
                    -not -path '*/.venv/*' \
                    -not -path '*/.venvs/*' \
                    -not -path '*/venv/*' \
                    -not -path '*/venvs/*' \
                    -not -path '*/.git/*' \
                    -not -path '*/.hg/*' \
                    -not -path '*/.tox/*' \
                    -not -path '*/__pycache__/*' \
                    -not -path '*/.egg-info*' \
                    -not -path "*/$bower_components/*" \
                    -not -path '*/node_modules/*' \
                    -not -path '*/conftest_*.c.gcov')
        if [ "$files" != "" ]; then
            echo "Coverage files= $files"
            bash <(curl -s https://codecov.io/bash) -f "$files"
        fi
